{"ast":null,"code":"var _jsxFileName = \"/Users/missusfantastic/Library/Mobile Documents/com~apple~CloudDocs/Coding/Lambda/Web Applications I/Cypress-Testing/src/Components/Form.jsx\";\nimport React, { useState } from \"react\";\nimport { withFormik, Form, ErrorMessage, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\n\nconst FormContainer = ({\n  props,\n  values,\n  errors,\n  touched,\n  isSubmitting\n}) => {\n  return React.createElement(Form, {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(ErrorMessage, {\n    name: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }), React.createElement(Field, {\n    \"data-cy\": \"name\",\n    className: \"field\",\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    name: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), React.createElement(Field, {\n    \"data-cy\": \"email\",\n    className: \"field\",\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    name: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(Field, {\n    \"data-cy\": \"password\",\n    className: \"field\",\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(ErrorMessage, {\n    name: \"tos\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(Field, {\n    \"data-cy\": \"tos\",\n    className: \"field\",\n    id: \"checkbox\",\n    type: \"checkbox\",\n    name: \"tos\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), \"Accept Terms of Service\"), React.createElement(\"button\", {\n    \"data-cy\": \"submit\",\n    disabled: isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Submit\"));\n};\n\nconst FormikLoginForm = withFormik({\n  mapPropsToValues({\n    name,\n    email,\n    password,\n    tos\n  }) {\n    return {\n      name: name || \"\",\n      email: email || \"\",\n      password: password || \"\",\n      tos: tos || false\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required(\"Your name is required\"),\n    email: Yup.string().email(\"Email is not valid\").required(\"Email is required\"),\n    password: Yup.string().min(12, \"Password must be 12 characters or longer\").required(\"Password is required\"),\n    tos: Yup.bool().test('tos', 'You must agree with our Terms of Services', value => value === true).required(\"You must agree with our Terms of Services\")\n  }),\n\n  handleSubmit(values, {\n    resetForm,\n    setErrors,\n    setSubmitting,\n    props\n  }) {\n    axios.post(\"https://reqres.in/api/users\", values).then(res => {\n      if (values.email === \"waffle@syrup.com\") {\n        console.log(\"Email already taken\");\n        setErrors({\n          email: \"Email already taken!\"\n        });\n      } else {\n        console.log(res);\n        props.setUser([...props.user, res]);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n    resetForm();\n  }\n\n})(FormContainer);\nexport default FormikLoginForm;","map":{"version":3,"sources":["/Users/missusfantastic/Library/Mobile Documents/com~apple~CloudDocs/Coding/Lambda/Web Applications I/Cypress-Testing/src/Components/Form.jsx"],"names":["React","useState","withFormik","Form","ErrorMessage","Field","Yup","axios","styled","FormContainer","props","values","errors","touched","isSubmitting","FormikLoginForm","mapPropsToValues","name","email","password","tos","validationSchema","object","shape","string","required","min","bool","test","value","handleSubmit","resetForm","setErrors","setSubmitting","post","then","res","console","log","setUser","user","catch","err"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { withFormik, Form, ErrorMessage, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\n\nconst FormContainer = ({ props, values, errors, touched, isSubmitting }) => {\n  return (\n    <Form className=\"form\">\n      <ErrorMessage name=\"name\" />\n      <Field\n        data-cy=\"name\"\n        className=\"field\"\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"name\" />\n      <ErrorMessage name=\"email\" />\n      <Field\n        data-cy=\"email\"\n        className=\"field\"\n        type=\"email\"\n        name=\"email\"\n        placeholder=\"email\" />\n      <ErrorMessage name=\"password\" />\n      <Field\n        data-cy=\"password\"\n        className=\"field\"\n        type=\"password\"\n        name=\"password\"\n        placeholder=\"password\"\n      />\n      <label>\n        <ErrorMessage name=\"tos\" />\n        <Field\n          data-cy=\"tos\"\n          className=\"field\"\n          id=\"checkbox\"\n          type=\"checkbox\"\n          name=\"tos\" />\n        Accept Terms of Service\n      </label>\n      <button data-cy=\"submit\" disabled={isSubmitting}>Submit</button>\n    </Form>\n  );\n};\n\nconst FormikLoginForm = withFormik({\n  mapPropsToValues({ name, email, password, tos }) {\n    return {\n      name: name || \"\",\n      email: email || \"\",\n      password: password || \"\",\n      tos: tos || false\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required(\"Your name is required\"),\n    email: Yup.string()\n      .email(\"Email is not valid\")\n      .required(\"Email is required\"),\n    password: Yup.string()\n      .min(12, \"Password must be 12 characters or longer\")\n      .required(\"Password is required\"),\n    tos: Yup.bool()\n      .test(\n        'tos',\n        'You must agree with our Terms of Services',\n        value => value === true\n      )\n      .required(\"You must agree with our Terms of Services\")\n  }),\n  handleSubmit(values, { resetForm, setErrors, setSubmitting, props }) {\n    axios\n      .post(\"https://reqres.in/api/users\", values)\n      .then(res => {\n        if (values.email === \"waffle@syrup.com\") {\n          console.log(\"Email already taken\");\n          setErrors({ email: \"Email already taken!\" });\n        } else {\n          console.log(res);\n          props.setUser([...props.user, res]);\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    resetForm()\n  }\n})(FormContainer);\n\nexport default FormikLoginForm;\n"]},"metadata":{},"sourceType":"module"}